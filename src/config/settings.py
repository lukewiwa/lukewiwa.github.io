"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import logging
from datetime import timedelta
from pathlib import Path
from urllib.parse import urljoin

import environ
from django.urls import reverse_lazy
from django.utils.log import DEFAULT_LOGGING

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_DIR = BASE_DIR.parent

env = environ.Env(
    DJANGO_SECRET_KEY=(str,),
    DEBUG=(bool, False),
    DJANGO_LOG_LEVEL=(str, "INFO"),
    DEBUG_TOOLBAR_ENABLED=(bool, False),
    ALLOWED_HOSTS=(list, []),
    ROOT_URLCONF=(str, "config.urls.prod"),
    DOMAIN=(str,),
    STATIC_HOST=(str, ""),
    CSRF_COOKIE_NAME=(str, "wiwablogcsrftoken"),
    CSRF_COOKIE_SECURE=(bool, True),
    CSRF_COOKIE_HTTPONLY=(bool, True),
    SESSION_COOKIE_NAME=(str, "wiwablogsessionid"),
    # Default session age. This tends to need tweaking from project to project.
    SESSION_COOKIE_AGE=(int, timedelta(weeks=2).total_seconds()),
    # NOT the default but recommended to True for security.
    # For local development this will need to be set to false since localhost
    # isn't served on https. The docker compose setup does this automatically
    # or it can be manually set in the `.env` file.
    SESSION_COOKIE_SECURE=(bool, True),
    SESSION_COOKIE_HTTPONLY=(bool, True),
    DATABASE_ENGINE=(str, "django_sqlite_object_storage"),
    STATIC_ROOT=(Path, "/staticfiles"),
    AWS_STORAGE_BUCKET_NAME=(str, None),
    AWS_S3_ACCESS_KEY_ID=(str, None),
    AWS_S3_SECRET_ACCESS_KEY=(str, None),
    AWS_S3_ENDPOINT_URL=(str, None),
    SQLITE_OBJECT_STORAGE_BUCKET_NAME=(str),
    SQLITE_OBJECT_STORAGE_ACCESS_KEY_ID=(str, None),
    SQLITE_OBJECT_STORAGE_ACCESS_SECRET=(str, None),
    SQLITE_OBJECT_STORAGE_ENDPOINT_URL=(str, None),
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

# ----------------------------------------------------------
# Sessions
# ----------------------------------------------------------

SESSION_COOKIE_NAME = env.str("SESSION_COOKIE_NAME")
SESSION_COOKIE_AGE = env.str("SESSION_COOKIE_AGE")
SESSION_COOKIE_SECURE = env.bool("SESSION_COOKIE_SECURE")
SESSION_COOKIE_HTTPONLY = env.bool("SESSION_COOKIE_HTTPONLY")
CSRF_COOKIE_NAME = env.str("CSRF_COOKIE_NAME")
CSRF_COOKIE_SECURE = env.bool("CSRF_COOKIE_SECURE")
CSRF_COOKIE_HTTPONLY = env.bool("CSRF_COOKIE_HTTPONLY")

# Application definition

INSTALLED_APPS = [
    "core.apps.CoreConfig",
    "blog.apps.BlogConfig",
    "admin_core.apps.AdminCoreConfig",
    "admin_utils.apps.AdminUtilsConfig",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "bakery",
    "wagtailbakery",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django_extensions",
    "wagtail_highlight",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = env("ROOT_URLCONF")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

USE_X_FORWARDED_HOST = True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {"level": "INFO", "handlers": ["console"]},
    "filters": DEFAULT_LOGGING["filters"],
    "formatters": DEFAULT_LOGGING["formatters"],
    "handlers": {
        **DEFAULT_LOGGING["handlers"],
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        **DEFAULT_LOGGING["loggers"],
    },
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": env("DATABASE_ENGINE"),
        "NAME": "/tmp/db.sqlite3",
        "SQLITE_OBJECT_STORAGE_BUCKET_NAME": env.str(
            "SQLITE_OBJECT_STORAGE_BUCKET_NAME"
        ),
        "SQLITE_OBJECT_STORAGE_ACCESS_KEY_ID": env.str(
            "SQLITE_OBJECT_STORAGE_ACCESS_KEY_ID"
        ),
        "SQLITE_OBJECT_STORAGE_ACCESS_SECRET": env.str(
            "SQLITE_OBJECT_STORAGE_ACCESS_SECRET"
        ),
        "SQLITE_OBJECT_STORAGE_ENDPOINT_URL": env.str(
            "SQLITE_OBJECT_STORAGE_ENDPOINT_URL"
        ),
    }
}

AUTH_USER_MODEL = "core.User"
LOGIN_REDIRECT_URL = reverse_lazy("core:index")

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Australia/Sydney"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = urljoin(env.str("STATIC_HOST"), "static/")
WHITENOISE_ROOT = BASE_DIR / "public"
STATIC_ROOT = env.str("STATIC_ROOT")
STATICFILES_DIRS = (("frontend", (BASE_DIR / "frontend" / "dist")),)


STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "file_overwrite": False,
            "bucket_name": env.str("AWS_STORAGE_BUCKET_NAME"),
            "access_key": env.str("AWS_S3_ACCESS_KEY_ID"),
            "secret_key": env.str("AWS_S3_SECRET_ACCESS_KEY"),
            "endpoint_url": env.str("AWS_S3_ENDPOINT_URL"),
            "location": "media",
        },
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Wagtail

WAGTAIL_SITE_NAME = "Wiwa's Blog"
WAGTAILADMIN_BASE_URL = env.str("DOMAIN")

WAGTAILIMAGES_EXTENSIONS = ["gif", "jpg", "jpeg", "png", "webp", "svg"]

# ----------------------------------------------------------
# Bakery
# ----------------------------------------------------------

BUILD_DIR = "/tmp/build"

BAKERY_VIEWS = (
    "wagtailbakery.views.AllPublishedPagesView",
    "core.views.IndexView",
    "core.views.ProjectsView",
)

# ----------------------------------------------------------
# Debug Toolbar
# ----------------------------------------------------------

DEBUG_TOOLBAR_ENABLED = env("DEBUG_TOOLBAR_ENABLED")
if DEBUG_TOOLBAR_ENABLED and ROOT_URLCONF == "config.urls.debug":
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

    # Allow for docker networks to connect
    # https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#configure-internal-ips
    import socket

    try:
        _, _, internal_ips = socket.gethostbyname_ex(socket.gethostname())  # type: ignore
    except socket.gaierror as e:
        logger.warning(e)
        internal_ips = []

    # ADDITIONALLY docker desktop on Mac and Windows run on a virtual machine
    # that are mapped via an IP address into the host machine. This IP is sent in
    # Django requests as the REMOTE_ADDR value so let's add that to the internal ips too.
    # https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host
    try:
        _, _, docker_desktop_ips = socket.gethostbyname_ex("host.docker.internal")  # type: ignore
    except socket.gaierror as e:
        logger.warning(e)
        docker_desktop_ips = []

    ips = [*internal_ips, *docker_desktop_ips]
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]
