{"path":"blog/toyplot","templateID":5,"sharedPropsHashes":{},"localProps":{"post":{"content":"\nMy previous attempts at using python for plotting saw me use the massive and widely used library of [Matplotlib](https://matplotlib.org). I managed to produce some workable plots which I exported to jpeg and used on one of my [medium articles](https://medium.com/@lukewiwa/the-2020-code-of-points-what-we-might-expect-28afdab4b095). Although extremely customisable and functional I began the search for a plotting library with a nicer API that would export to more web friendly formats such as html and SVG.\n\nAfter some searching I stumbled upon [toyplot](http://toyplot.readthedocs.io) which I've been quite happy with. I went ahead and updated the plots from my medium article using the library and uploaded the results to where I've mirrored that medium article [here](/blog/the_2020_code_predictions). The format options are various but I decided to export to an html/css/js format and simply copied and pasted into my static site generator.\n\nThe API is quite straight forward, it boils down to a single `Canvas` object which you can then add different attributes to. It's a nice way to block together the things you want. It doesn't seem to have hard opinions about what plot you are building to begin with which for me is nice as it generalises my code across different graph types. You tend to always begin the same way. Here's a quick snippet of the heat map plots I produced with it.\n\n```python\nimport pandas as pd\nimport toyplot\nimport toyplot.html\n\n# initialise a pandas dataframe of the code of points\nwith open(csv, 'r') as f:\n    data = pd.read_csv(f)\n\n# Produce heat map matrix. I chose Rings\napp_name = 'Rings'\nmatrix = pd.crosstab(\n    data[data.app==app_name].value,\n    data.eg,\n)\n\n# Some variables to make the plot pretty\ndomain_min = matrix.values.min()\ndomain_max = matrix.values.max()\ntlocator=toyplot.locator.Explicit(labels=list(matrix))\nllocator=toyplot.locator.Explicit(labels=list(matrix.index))\nwidth = 500\nheight = 600\nlabel = app_name\ntlabel = \"Element Group\"\nllabel = \"Value\"\ncolormap = toyplot.color.brewer.map(\n    \"Greens\",\n    reverse=True,\n    domain_min=domain_min,\n    domain_max=domain_max,\n)\n\n# initialise the Canvas object with variables above\napp_canvas, app_table = toyplot.matrix(\n    (matrix, colormap),\n    tlocator=tlocator,\n    llocator=llocator,\n    width=width,\n    height=height,\n    label=label,\n    tlabel=tlabel,\n    llabel=llabel,\n)\n\n# Clean up the Canvas, give it a name and render in html\napp_table.body.grid.hlines[[0,-1],...] = \"single\"\napp_table.body.grid.vlines[...,[0,-1]] = \"single\"\nplot_name = \"{}.html\".format(app_name)\ntoyplot.html.render(\n    app_canvas,\n    plot_name,\n)\n```\nThe output is a rather nice looking plot based on html, css and javascript. The result is below.\n\n![cool graph](/graphs/sr.svg)\n\nThe full code is available on [Github](https://github.com/lukewiwa/matrix_plots_code_of_points) for anybody interested.","data":{"title":"Toyplot - A Simple Python Plotting Library","slug":"toyplot","layout":"simple_page","date":"12/07/2017","teaser":"My previous attempts at using python for plotting saw me use the massive and widely used library of Matplotlib. I managed to produce some workable plots which I exported to jpeg and used on one of my medium articles. Although extremely customisable and functional I began the search for a plotting library with a nicer API that would export to more web friendly formats such as html and SVG."},"isEmpty":false,"excerpt":"","path":"blog/toyplot.md"}}}
